<?php

declare(strict_types=1);

namespace Tests\EGlobal\Healthcheck\tests\Factory;

use EGlobal\Healthcheck\Checker\CheckerInterface;
use EGlobal\Healthcheck\DTO\Response;
use EGlobal\Healthcheck\Factory\ResponseFactory;
use PHPUnit\Framework\TestCase;

/**
 * @coversDefaultClass \EGlobal\Healthcheck\Factory\ResponseFactory
 */
final class ResponseFactoryTest extends TestCase
{
    private ResponseFactory $responseFactory;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->responseFactory = new ResponseFactory();
    }

    /**
     * @test
     *
     * @covers ::createFromChecker
     *
     * @dataProvider responseDataProvider
     */
    public function it_returns_correct_response(string $status, string $message): void
    {
        $checker = $this->createCheckerMock('db', ['scheme' => 'https']);
        $response = $this->responseFactory->createFailure($checker, $status, $message);
        $responseData = $response->toArray();

        $this->assertEquals('db', $responseData['name']);
        $this->assertEquals($message, $responseData['message']);
        $this->assertEquals($status, $responseData['status']);
        $this->assertEquals(['scheme' => 'https'], $responseData['connection_details']);
        $this->assertGreaterThanOrEqual(time(), $responseData['check_timestamp']);
    }

    /**
     * @test
     *
     * @covers ::createFromChecker
     */
    public function it_returns_correct_status()
    {
        $checker = $this->createCheckerMock('db', ['scheme' => 'https']);

        // assert SUCCESS
        $response = $this->responseFactory->createSuccess($checker);
        $this->assertTrue($response->success());
        $this->assertFalse($response->fail());

        // assert ERROR
        $response = $this->responseFactory->createFailure($checker, Response::STATUS_FAIL, 'error');
        $this->assertFalse($response->success());
        $this->assertTrue($response->fail());

        // assert PENDING
        $response = $this->responseFactory->createFailure($checker, Response::STATUS_PENDING, 'pending');
        $this->assertFalse($response->success());
        $this->assertTrue($response->fail());
    }

    public function responseDataProvider(): \Traversable
    {
        yield [Response::STATUS_SUCCESS, 'success message'];
        yield [Response::STATUS_FAIL, 'error message'];
        yield [Response::STATUS_PENDING, 'pending message'];
    }

    private function createCheckerMock(string $alias, array $connectionDetails): CheckerInterface
    {
        $checker = $this->createMock(CheckerInterface::class);
        $checker->method('name')->willReturn($alias);
        $checker->method('connectionDetails')->willReturn($connectionDetails);

        return $checker;
    }
}
